# designed for tmux > 3.2

unbind C-b
set -g prefix C-y
bind-key C-y send-prefix

# works for me...
# "screen-256color" does not
set-option -s default-terminal "xterm-256color"

set -g mouse on

# fast escape in vim
set -sg escape-time 0

#set -g set-clipboard on

set -g focus-events on
# is default
# set -ag terminal-features "focus"

set-option -g history-limit 262144

# set longer than my key-repeat so holding down keys will repeat the command
set-option -g repeat-time 600

# show error messages longer
set-option -g display-time 1500

unbind '"'
unbind %
# open panes in current folder
bind-key -T prefix | split-window -h -c "#{pane_current_path}"
bind-key -T prefix - split-window -v -c "#{pane_current_path}"

# windows may not be automatically renamed
set-option -g allow-rename off

unbind &
bind-key -T prefix X confirm-before -p "kill-window #W (y/n)?" kill-window # <shift>+x

# disable dragging panes
unbind-key -n MouseDrag1Border

# navigation shortcuts mapped to <cmd>
# see iterm: profile->keys->key mappings
bind-key -T root S-F1 select-pane -L   # code: ^[[1;2P  mapped to: <cmd>+<left>
bind-key -T root S-F2 select-pane -R   # code: ^[[1;2Q  mapped to: <cmd>+<right>
bind-key -T root S-F3 select-pane -U   # code: ^[[1;2R  mapped to: <cmd>+<up>
bind-key -T root S-F4 select-pane -D   # code: ^[[1;2S  mapped to: <cmd>+<down>
bind-key -T root S-F5 previous-window  # code: ^[[15;2~ mapped to: <ctrl>+<cmd>+<left>
bind-key -T root S-F6 next-window      # code: ^[[17;2~ mapped to: <ctrl>+<cmd>+<right>
bind-key -T root S-F7 switch-client -p # code: ^[[18;2~ mapped to: <ctrl>+<alt>+<cmd>+<left>
bind-key -T root S-F8 switch-client -n # code: ^[[19;2~ mapped to: <ctrl>+<alt>+<cmd>+<right>
# unbind session switch
unbind (
unbind )
# unbind window switch
unbind n
unbind p
# unbind default prefix + arrow movements
unbind Left
unbind Right
unbind Up
unbind Down

unbind '{'
unbind '}'
# swap currently active pane with the one above, left of, etc.
set -s user-keys[2] "\e[99;3~" # <shift>+<cmd>+<up>
set -s user-keys[3] "\e[99;4~" # <shift>+<cmd>+<down>
set -s user-keys[4] "\e[99;5~" # <shift>+<cmd>+<left>
set -s user-keys[5] "\e[99;6~" # <shift>+<cmd>+<right>
bind-key -T root User2 swap-pane -d -t'{up-of}'
bind-key -T root User3 swap-pane -d -t'{down-of}'
bind-key -T root User4 swap-pane -d -t'{left-of}'
bind-key -T root User5 swap-pane -d -t'{right-of}'

# unbind selecting next-layout
unbind ' '

# prompt for 2 panes and swap them
# the script is used to address panes above 9 with a-z...
bind-key -T prefix % display-panes -b -N -d0 \; command-prompt -1 -p "src:","tgt:" "run-shell \"~/.tmux/swap.sh %1 %2\""

# create new session - ask for name
set -s user-keys[0] "\e[99;1~" # <ctrl>+<alt>+c
bind-key -T prefix User0 command-prompt -p "New Session:" "new -s %%%"

# unbind default new window key
unbind c
# create new window
set -s user-keys[1] "\e[99;2~" # <alt>+c
bind-key -T prefix User1 new-window

# split into 9 panes and arrange them in a grid
bind-key -T prefix C-t new-window \; \
split-window -h \; \
split-window -v \; \
split-window -h \; \
split-window -v \; \
split-window -h \; \
split-window -v \; \
split-window -h \; \
split-window -v \; \
select-layout "tiled" \; \
select-pane -t 5

# print pane size while resizing
bind-key -r -T prefix C-Up    resize-pane -U \; display-panes -b -d1000
bind-key -r -T prefix C-Down  resize-pane -D \; display-panes -b -d1000
bind-key -r -T prefix C-Left  resize-pane -L \; display-panes -b -d1000
bind-key -r -T prefix C-Right resize-pane -R \; display-panes -b -d1000

# print all pane sizes (and pane numbers)
# difference to original: close with key
bind-key -T prefix q display-pane -d0
set -g display-panes-active-colour colour104
set -g display-panes-colour green

set -g @scroll-speed-num-lines-per-scroll 1

# allows to scroll in alternate screen apps which have no clue about scrolling
# from: https://github.com/tmux/tmux/issues/1610#issuecomment-504424608
bind-key -T root WheelUpPane \
if -Ft= "#{?pane_active,0,1}" "select-pane" \
    "if -Ft= \"#{mouse_any_flag}\" \
    \"send -M\" \
    \"if -Ft= '#{alternate_on}' \
        'send -N 1 Up' 'copy-mode -e' \""

bind-key -T root WheelDownPane \
    if -Ft= "#{?pane_active,0,1}" "select-pane" \
        "if -Ft= \"#{mouse_any_flag}\" \
            \"send -M\" \
            \"if -Ft= '#{alternate_on}' \
                'send -N 1 Down' '' \""

set-option -w -g mode-keys vi

# scroll in copy mode
bind-key -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 1 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 1 scroll-down

# ctrl+up/down scrolls to top/bottom line
bind-key -T copy-mode-vi C-Up send -X history-top
bind-key -T copy-mode-vi C-Down send -X history-bottom

# scroll faster with shift
bind-key -T copy-mode-vi S-Up send-keys -N 5 -X cursor-up
bind-key -T copy-mode-vi S-Down send-keys -N 5 -X cursor-down
# scroll super speed with alt+shift
# (see iterm keybindings)
bind-key -T copy-mode-vi S-F9 send-keys -N 10 -X cursor-up    # code: ^[[20;2~
bind-key -T copy-mode-vi S-F10 send-keys -N 10 -X cursor-down # code: ^[[21;2~ mapped to: <alt>+shift>+<down>

# select text without putting it into the clipboard, only do this when then pressing enter
unbind -T copy-mode-vi MouseDragEnd1Pane

# double / tripple click only select, it does not automatically put into clipboard!
bind-key    -T copy-mode-vi DoubleClick1Pane     select-pane \; send-keys -X select-word
bind-key    -T copy-mode-vi TripleClick1Pane     select-pane \; send-keys -X select-line
bind-key    -T root         DoubleClick1Pane     select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode ; send -X select-word"
bind-key    -T root         TripleClick1Pane     select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode ; send -X select-line"

# map vi copy mode to ctrl+y ctrl+c
unbind-key -T prefix [
bind-key -T prefix C-c copy-mode
# copy mode style
set -g mode-style bg=colour11,fg=colour0
# exit copy mode with ctrl-c
bind-key -T copy-mode-vi C-c send-keys -X cancel
# clear accidental selection with Escape
bind-key -T copy-mode-vi Escape send-keys -X clear-selection
# do not automatically exit copy mode
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe

# do in tmux what cmd+k does in iterm: clear and delete scroll buf
# NOTE: iterm's <cmd>+k is remapped to <cmd>+<shift>+k
#       see SystemPrefs -> Keyboard -> Shortcuts -> App Shortcuts -> iTerm.app -> "Clear Buffer"
bind-key -T root M-F1 send-keys -R C-l \; clear-history # code: ^[[1;3P mapped to: <cmd>+k
bind-key -T root M-F2 clear-history # code: [1;3Q mapped to: <cmd>+<alt>+k

# start incremental search from normal mode
bind-key -T prefix / copy-mode \; command-prompt -i -p "(search ᐁ)" "send -X search-forward-incremental \"%%%\""
bind-key -T prefix ? copy-mode \; command-prompt -i -p "(search ᐃ)" "send -X search-backward-incremental \"%%%\""
bind-key -T prefix \\ copy-mode \; command-prompt -p "(search regex ᐁ)" "send -X search-forward \"%%%\""
# start search from copy mode
bind-key -T copy-mode-vi /  command-prompt -i -p "(search ᐁ)" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ?  command-prompt -i -p "(search ᐃ)" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi \\ command-prompt -p "(search regex ᐁ)" "send -X search-forward \"%%%\""

set-option -w -g copy-mode-match-style fg=black,bg=colour220
set-option -w -g copy-mode-current-match-style fg=black,bg=colour214

# status bar and stuff follows:
#

# paint status bar gray if focus lost
# NOTE: replaces all other potential hooks
set-hook -g client-focus-out 'set-option -w -g window-status-current-style fg=colour239,bg=colour235 ; \
        set-option -w -g window-status-style fg=colour235,bg=colour239 ; \
        set-option -w -g status-style fg=colour235,bg=colour239; \
        set-option -w -g status-right-style fg=colour235,bg=colour239 ; \
        set-option -w -g status-left-style fg=colour242,bg=colour16 ; \
        set-option -w -g window-status-format "#{?window_activity_flag,#[fg=colour239#,bg=colour235#,bold] <#I: #W> ,  #I: #W  }#[default]" ; \
        set -g pane-active-border-style fg=colour250 ; \
        set -g pane-border-style fg=colour240'

set-hook -g client-focus-in 'set-option -w -g window-status-current-style fg=green,bg=black ; \
        set-option -w -g window-status-style fg=black,bg=green ; \
        set-option -w -g status-style fg=black,bg=green ; \
        set-option -w -g status-right-style fg=black,bg=green ; \
        set-option -w -g status-left-style fg=black,bg=white ; \
        set-option -w -g window-status-format "#{?window_activity_flag,#[fg=green#,bg=colour16#,bold] <#I: #W> ,  #I: #W  }#[default]" ; \
        set -g pane-active-border-style fg=colour104 ; \
        set -g pane-border-style fg=green'

set -g pane-active-border-style bg=default,fg=colour104
set -g pane-border-style fg=green
# add a pane border line on the bottom - makes it easier to see which pane is selected
set -g pane-border-status bottom
set -g pane-border-format ""

set -g status-interval 1

set-option -g status-position top
set -g status-justify left

# check if we have entered the prefix,
#               or are zoomed in,
#               or are in copy mode,
#               or are synchronized,
#               or are in alternate screen mode,
#               or nothing
set-option -w -g status-left "#[bg=black]#{?client_prefix,#[fg=green]●,#{?window_zoomed_flag,#[fg=green]Z,#{?pane_in_mode,#[fg=yellow]⌽,#{?pane_synchronized,#[fg=colour231]#[bg=colour196]●,#{?alternate_on,#[fg=green]≀,≀}}}}}#[default] «#S» "
set -g status-left-length  15
set -g status-right-length 500
set-option -w -g window-status-separator ''
set-option -w -g status-right "#( ~/.tmux/path.sh \"#{pane_current_path}\" \"#{window_width}\" \"#{status-left-length}\" \"#{client_flags}\" \"#{client_key_table}\")"
set-option -w -g status-right-style fg=black,bg=green
# colors are inverted when activity is detected (changed in tmux3.3)
set-option -w -g window-status-format "#{?window_activity_flag,#[fg=green#,bg=colour16#,bold] <#I: #W> ,  #I: #W  }#[default]"
set-option -w -g window-status-current-format "[ #I: #W ]"

set-option -w -g window-status-current-style fg=green,bg=black
set-option -w -g window-status-style fg=black,bg=green
set-option -w -g status-style fg=black,bg=green
set-option -w -g status-right-style fg=black,bg=green
set-option -w -g status-left-style fg=black,bg=white

# monitor acitivty in other windows
set-option -w -g monitor-activity on
set -g activity-action other
# but don't produce a message
set -g visual-activity off

#panes start at 1
set -g pane-base-index 1
# windows start at 1
set -g base-index 1

# handy for testing
bind-key -T prefix C-R source ~/.tmux.conf

# calculator
bind-key -T prefix = display-popup -T"calc" -w50 -h22 -xC -y25 -E .tmux/libc/libc.sh

# reasonably sized zoom
bind-key -T prefix Z run-shell .tmux/pop.sh

# based on: https://github.com/samoshkin/tmux-config
# disable prefix, switch to table "off", cancel copy mode, run focus hook, disable hooks, refresh status line
# code: ^[[23;2~ mapped to: <cmd>+<esc>
bind-key -T root S-F11 set prefix None \; set key-table off \; if -F '#{pane_in_mode}' 'send-keys -X cancel' \; \
        set-hook -gR client-focus-out \; \
        set-hook client-focus-in ' ' \; \
        set-hook client-focus-out ' ' \; \
        send-keys M-F8 \; \
        refresh-client -S

bind-key -T off S-F11 set -u prefix \; set -u key-table \; \
        set-hook -u client-focus-in \; \
        set-hook -u client-focus-out \; \
        set-hook -gR client-focus-in \; \
        send-keys M-F9 \; \
        refresh-client -S

# keep 2^12 history items and save/recall them
set -g prompt-history-limit 4096
set -g history-file ~/.tmux_history

if-shell 'test -n "$SSH_CLIENT"' 'source-file ~/.anyrc/.anyrc.d/.tmux/.tmux.remote.conf'

# S-F11 in vim
# S-F12 in vim
# M-F3  in zsh
# M-F4  in vim
# C-F1,C-F2,C-F4 in vim
